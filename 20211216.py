# 로또의 최고 순위와 최저 순위
# 문제 설명
# 로또 6/45(이하 '로또'로 표기)는 1부터 45까지의 숫자 중 6개를 찍어서 맞히는 대표적인 복권입니다. 아래는 로또의 순위를 정하는 방식입니다. 1

# 순위	당첨 내용
# 1	6개 번호가 모두 일치
# 2	5개 번호가 일치
# 3	4개 번호가 일치
# 4	3개 번호가 일치
# 5	2개 번호가 일치
# 6(낙첨)	그 외
# 로또를 구매한 민우는 당첨 번호 발표일을 학수고대하고 있었습니다.
# 하지만, 민우의 동생이 로또에 낙서를 하여, 일부 번호를 알아볼 수 없게 되었습니다.
# 당첨 번호 발표 후, 민우는 자신이 구매했던 로또로 당첨이 가능했던 최고 순위와 최저 순위를 알아보고 싶어 졌습니다.
# 알아볼 수 없는 번호를 0으로 표기하기로 하고,
# 민우가 구매한 로또 번호 6개가 44, 1, 0, 0, 31 25라고 가정해보겠습니다. 당첨 번호 6개가 31, 10, 45, 1, 6, 19라면, 당첨 가능한 최고 순위와 최저 순위의 한 예는 아래와 같습니다.

# 당첨 번호	       31	10	   45  1	6  19  결과
# 최고 순위 번호	31	0→10	44	1	0→6	25	4개 번호 일치, 3등
# 최저 순위 번호	31	0→11	44	1	0→7	25	2개 번호 일치, 5등
# 순서와 상관없이, 구매한 로또에 당첨 번호와 일치하는 번호가 있으면 맞힌 걸로 인정됩니다.
# 알아볼 수 없는 두 개의 번호를 각각 10, 6이라고 가정하면 3등에 당첨될 수 있습니다.
# 3등을 만드는 다른 방법들도 존재합니다. 하지만, 2등 이상으로 만드는 것은 불가능합니다.
# 알아볼 수 없는 두 개의 번호를 각각 11, 7이라고 가정하면 5등에 당첨될 수 있습니다.
# 5등을 만드는 다른 방법들도 존재합니다. 하지만, 6등(낙첨)으로 만드는 것은 불가능합니다.
# 민우가 구매한 로또 번호를 담은 배열 lottos, 당첨 번호를 담은 배열 win_nums가 매개변수로 주어집니다.
# 이때, 당첨 가능한 최고 순위와 최저 순위를 차례대로 배열에 담아서 return 하도록 solution 함수를 완성해주세요.

# 제한사항
# lottos는 길이 6인 정수 배열입니다.
# lottos의 모든 원소는 0 이상 45 이하인 정수입니다.
# 0은 알아볼 수 없는 숫자를 의미합니다.
# 0을 제외한 다른 숫자들은 lottos에 2개 이상 담겨있지 않습니다.
# lottos의 원소들은 정렬되어 있지 않을 수도 있습니다.
# win_nums은 길이 6인 정수 배열입니다.
# win_nums의 모든 원소는 1 이상 45 이하인 정수입니다.
# win_nums에는 같은 숫자가 2개 이상 담겨있지 않습니다.
# win_nums의 원소들은 정렬되어 있지 않을 수도 있습니다.
# 입출력 예
# lottos	            win_nums	                result
# [44, 1, 0, 0, 31, 25]	[31, 10, 45, 1, 6, 19]	    [3, 5]
# [0, 0, 0, 0, 0, 0]	[38, 19, 20, 40, 15, 25]	[1, 6]
# [45, 4, 35, 20, 3, 9]	[20, 9, 3, 45, 4, 35]	    [1, 1]

# import random
# win_nums = []
# for i in range(6):
#     win_nums.append(random.randint(1, 45))
# lottos = [45, 4, 2, 5, 3, 9]
# win_nums = [20, 9, 3, 45, 4, 35]


# def solution(lottos, win_nums):
#     rank = {0: 6, 1: 6, 2: 5, 3: 4, 4: 3, 5: 2, 6: 1}
#     max_num = rank[len(set(lottos) & set(win_nums)) + lottos.count(0)]
#     min_num = rank[len(set(lottos) & set(win_nums))]

#     return max_num, min_num


# print(solution(lottos, win_nums))

# == == == == == == == == == == == == == == == == == == == == == == == == == == == ==
# [카카오 인턴] 키패드 누르기
# 문제 설명
# 스마트폰 전화 키패드의 각 칸에 다음과 같이 숫자들이 적혀 있습니다.

# kakao_phone1.png

# 이 전화 키패드에서 왼손과 오른손의 엄지손가락만을 이용해서 숫자만을 입력하려고 합니다.
# 맨 처음 왼손 엄지손가락은 * 키패드에 오른손 엄지손가락은 # 키패드 위치에서 시작하며,
# 엄지손가락을 사용하는 규칙은 다음과 같습니다.

# 엄지손가락은 상하좌우 4가지 방향으로만 이동할 수 있으며 키패드 이동 한 칸은 거리로 1에 해당합니다.
# 왼쪽 열의 3개의 숫자 1, 4, 7을 입력할 때는 왼손 엄지손가락을 사용합니다.
# 오른쪽 열의 3개의 숫자 3, 6, 9를 입력할 때는 오른손 엄지손가락을 사용합니다.
# 가운데 열의 4개의 숫자 2, 5, 8, 0을 입력할 때는
# 두 엄지손가락의 현재 키패드의 위치에서 더 가까운 엄지손가락을 사용합니다.
# 4-1. 만약 두 엄지손가락의 거리가 같다면, 오른손잡이는 오른손 엄지손가락, 왼손잡이는 왼손 엄지손가락을 사용합니다.
# 순서대로 누를 번호가 담긴 배열 numbers, 왼손잡이인지 오른손잡이인 지를
# 나타내는 문자열 hand가 매개변수로 주어질 때,
# 각 번호를 누른 엄지손가락이 왼손인 지 오른손인 지를 나타내는
# 연속된 문자열 형태로 return 하도록 solution 함수를 완성해주세요.

# [제한사항]
# numbers 배열의 크기는 1 이상 1,000 이하입니다.
# numbers 배열 원소의 값은 0 이상 9 이하인 정수입니다.
# hand는 "left" 또는 "right" 입니다.
# "left"는 왼손잡이, "right"는 오른손잡이를 의미합니다.
# 왼손 엄지손가락을 사용한 경우는 L, 오른손 엄지손가락을 사용한 경우는 R을 순서대로 이어붙여 문자열 형태로 return 해주세요.
# 입출력 예
# numbers	                        hand	result
# [1, 3, 4, 5, 8, 2, 1, 4, 5, 9, 5]	"right"	"LRLLLRLLRRL"
# [7, 0, 8, 2, 8, 3, 1, 5, 7, 6, 2]	"left"	"LRLLRRLLLRR"
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]	"right"	"LLRLLRLLRL"

numbers = [1, 3, 4, 5, 8, 2, 1, 4, 5, 9, 5]
hand = "right"


def solution(numbers, hand):
    answer = ''
    right_position = 10
    left_position = 12
    for i in numbers:
        if i == 0:
            i = 11
        if i % 3 == 1:
            answer += 'L'
            left_position = i
        elif i % 3 == 0:
            answer += 'R'
            right_position = i
        else:
            left = abs(i-left_position)
            right = abs(i-right_position)
            dis_left = (left // 3) + (left % 3)
            dis_right = (right // 3) + (right % 3)

            if dis_right > dis_left:
                left_position = i
                answer += 'L'
            elif dis_right < dis_left:
                right_position = i
                answer += 'R'
            else:
                if hand == 'left':
                    left_position = i
                    answer += 'L'
                elif hand == 'right':
                    right_position = i
                    answer += 'R'
    return answer


print(solution(numbers, hand))
