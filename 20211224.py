# 문자열 내 마음대로 정렬하기
# 문제 설명
# 문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때,
# 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다.
# 예를 들어 strings가 ["sun", "bed", "car"]이고 n이 1이면 각 단어의 인덱스 1의 문자 "u", "e", "a"로 strings를 정렬합니다.

# 제한 조건
# strings는 길이 1 이상, 50이하인 배열입니다.
# strings의 원소는 소문자 알파벳으로 이루어져 있습니다.
# strings의 원소는 길이 1 이상, 100이하인 문자열입니다.
# 모든 strings의 원소의 길이는 n보다 큽니다.
# 인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.
# 입출력 예
# strings	                n	return
# ["sun", "bed", "car"]	    1	["car", "bed", "sun"]
# ["abce", "abcd", "cdx"]	2	["abad", "abce", "cdc"]

# strings = ["abce", "abcd", "adx", 'aaa']
# n = 2


# def solution(strings, n):
#     strings.sort(key=lambda x: (x[n], x))
#     return strings


# print(solution(strings, n))

# == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == == =

# [1차] 비밀지도
# 문제 설명
# 비밀지도
# 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다.
# 그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다.
# 다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.

# 지도는 한 변의 길이가 n인 정사각형 배열 형태로,
#  각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류로 이루어져 있다.
# 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다.
# 각각 "지도 1"과 "지도 2"라고 하자.
# 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다.
# 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
# "지도 1"과 "지도 2"는 각각 정수 배열로 암호화되어 있다.
# 암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1,
# 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.

# 네오가 프로도의 비상금을 손에 넣을 수 있도록, 비밀지도의 암호를 해독하는 작업을 도와줄 프로그램을 작성하라.

# 입력 형식
# 입력으로 지도의 한 변 크기 n 과 2개의 정수 배열 arr1, arr2가 들어온다.

# 1 ≦ n ≦ 16
# arr1, arr2는 길이 n인 정수 배열로 주어진다.
# 정수 배열의 각 원소 x를 이진수로 변환했을 때의 길이는 n 이하이다. 즉, 0 ≦ x ≦ 2n - 1을 만족한다.
# 출력 형식
# 원래의 비밀지도를 해독하여 '#', 공백으로 구성된 문자열 배열로 출력하라.

# 입출력 예제
# 매개변수	값
# n	5
# arr1	[9, 20, 28, 18, 11]
# arr2	[30, 1, 21, 17, 28]
# 출력	["#####",
#       "# # #",
#       "### #",
#       "#  ##",
#       "#####"]
# 매개변수	값
# n	6
# arr1	[46, 33, 33 ,22, 31, 50]
# arr2	[27 ,56, 19, 14, 14, 10]
# 출력	["######",
#       "### #",
#       "## ##",
#       " #### ",
#       "#####",
#       "### # "]

n = 5
arr1 = [9, 20, 28, 18, 11]
arr2 = [30, 1, 21, 17, 28]


def solution(n, arr1, arr2):
    answer = []
    for i in range(n):
        string = ''
        for j in range(n):
            arr1_bin = int(bin(arr1[i])[2:].zfill(n)[j])
            arr2_bin = int(bin(arr2[i])[2:].zfill(n)[j])
            if arr1_bin == 0 and arr2_bin == 0:
                string += ' '
            else:
                string += '#'
        print(answer)
        answer.append(string)

    return answer
